version: 2

jobs:
  build:
    docker:
      - image: ${GOOGLE_DOCKER_REPOSITORY}/uber-builder:139
        auth: { username: _json_key, password: "${GOOGLE_CREDENTIALS}" }

    working_directory: ~/website

    steps:
      - checkout

      - restore-cache:
          keys:
            - website-v3-ssh

      - run:
          name: Register SSH key
          command: |
            if [ ! -e ~/.ssh/google_compute_engine ]; then ssh-keygen -f ~/.ssh/google_compute_engine -N ""; fi

      - save_cache:
          key: website-v3-ssh
          paths:
            - ~/.ssh

      - restore_cache:
          keys:
            - website-v3-{{ .Branch }}-yarn-{{ checksum "yarn.lock" }}
            - website-v3-{{ .Branch }}-yarn
            - website-v3-develop-yarn

      - run:
          name: Install dependencies
          command: |
            yarn install

      - save_cache:
          key: website-v3-{{ .Branch }}-yarn-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      - run:
          name: Build distribution
          command: |
            ./scripts/configure.sh
            yarn run build

      - run:
          name: Run spellchecker
          command: |
            RESULTS=$(for f in dist/*.html; do aspell list -l en_GB --add-filter=sgml --add-sgml-skip=script --add-extra-dicts=$(pwd)/wordlist < "${f}"; done)
            echo ${RESULTS}
            test "${RESULTS}" == ""

      - setup_remote_docker

      - run:
          name: Build Docker image
          command: docker build -t website .

      - run:
          name: GCloud auth
          command: google-cloud-auth --with-docker

      - run:
          name: Publish Docker image
          command: |
            docker-tag-and-push website ${CIRCLE_BUILD_NUM}
            docker-tag-and-push website $(echo ${CIRCLE_BRANCH} | tr "/" "-") # Also push a branch tag to make cluster reprovisioning more pleasant

      - deploy:
          command: |
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              gcloud container clusters get-credentials ${STAGING_CLUSTER_NAME} \
                --project ${STAGING_PROJECT_ID} \
                --zone ${STAGING_CLUSTER_ZONE}
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
              gcloud container clusters get-credentials ${PROD_CLUSTER_NAME} \
                --project ${PROD_PROJECT_ID} \
                --zone ${PROD_CLUSTER_ZONE}
            else
              exit 0
            fi

            kubectl set image -n www deployment/www www=${GCLOUD_DOCKER_REPOSITORY}/website:${CIRCLE_BUILD_NUM}
            
