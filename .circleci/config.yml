version: 2

references:

  defaults: &defaults
    working_directory: ~/website
    docker:
      - image: quartic/uber-builder:160     # We need the full power of uber-builder to build

  deploy_defaults: &deploy_defaults
    working_directory: ~/website
    docker:
      - image: quartic/noober-builder:160   # Speed deploys up as noober-builder is significantly smaller

  create_fallback_tag: &create_fallback_tag
    name: Create fallback tag
    command: gcloud container images add-tag ${GOOGLE_DOCKER_REPOSITORY}/website:${CIRCLE_SHA1} ${GOOGLE_DOCKER_REPOSITORY}/website:${TAG}

  deploy: &deploy
    name: Deploy to cluster
    command: kubectl set image -n www deployment/www www=${GOOGLE_DOCKER_REPOSITORY}/website:${CIRCLE_SHA1}


jobs:
  build:
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - website-v4-{{ .Branch }}-yarn-{{ checksum "yarn.lock" }}
            - website-v4-{{ .Branch }}-yarn
            - website-v4-develop-yarn

      - run: yarn install

      - save_cache:
          key: website-v4-{{ .Branch }}-yarn-{{ checksum "yarn.lock" }}
          paths:
            - node_modules

      - run:
          name: Build distribution
          command: |
            echo -e "version: ${CIRCLE_SHA1}" > src/data/build.yml
            yarn run build

      - run:
          name: Run spellchecker
          command: |
            RESULTS=$(for f in dist/*.html; do aspell list -l en_GB --add-filter=sgml --add-sgml-skip=script --add-extra-dicts=$(pwd)/wordlist < "${f}"; done)
            echo ${RESULTS}
            test "${RESULTS}" == ""

      - setup_remote_docker

      - run: docker build -t website .

      - run: google-cloud-auth --with-docker

      - run: docker-tag-and-push website ${CIRCLE_SHA1}


  deploy_to_staging:
    <<: *deploy_defaults

    steps:
      - run: google-cloud-auth

      - run:
          <<: *create_fallback_tag
          environment:
            TAG: staging

      - run: gcloud container clusters get-credentials ${STAGING_CLUSTER_NAME} --project ${STAGING_PROJECT_ID} --zone ${STAGING_CLUSTER_ZONE}

      - deploy: *deploy


  deploy_to_prod:
    <<: *deploy_defaults

    steps:
      - run: google-cloud-auth

      - run:
          <<: *create_fallback_tag
          environment:
            TAG: prod

      - run: gcloud container clusters get-credentials ${PROD_CLUSTER_NAME} --project ${PROD_PROJECT_ID} --zone ${PROD_CLUSTER_ZONE}

      - deploy: *deploy


workflows:
  version: 2

  build_and_deploy:
    jobs:
      - build

      - deploy_to_staging:
          requires:
            - build
          filters:
            branches:
              only: develop

      - hold:
          type: approval
          requires:
            - deploy_to_staging
          filters:
            branches:
              only: develop

      - deploy_to_prod:
          requires:
            - hold
          filters:
            branches:
              only: develop


experimental:
  notify:
    branches:
      only:
        - develop
